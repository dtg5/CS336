
import React from 'react';
import ReactDOM from 'react-dom';
import $ from 'jquery';
import * from 'global';

import CommentList from './commentlist';
import CommentForm from './commentform';

module.exports = React.createClass({
  getInitialState: function() {
        return {data: [], _isMounted: false};
  },
  loadCommentsFromServer: function() {
    if (this.state._isMounted) {
      $.ajax({
        url: API_URL,
        dataType: 'json',
        cache: false,
      })
        .done(function (result) {
          this.setState({data: result});
        }.bind(this))
        .fail(function (xhr, status, errorThrown) {
          console.error(API_URL, status, errorThrown.toString());
        }.bind(this));
    }
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: API_URL,
      dataType: 'json',
      type: 'POST',
      data: comment,
    })
     .done(function(result){
       this.setState({data: result});
     }.bind(this))
     .fail(function(xhr, status, errorThrown) {
       this.setState({data: comments});
       console.error(API_URL, status, errorThrown.toString());
     }.bind(this));
  },
  componentDidMount: function() {
    this.state._isMounted = true;
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, POLL_INTERVAL);
  },
  componentWillUnmount: function() {
    // Reset the isMounted flag so that the loadCommentsFromServer callback
    // stops requesting state updates when the commentList has been unmounted.
    // This switch is optional, but it gets rid of the warning triggered by
    // setting state on an unmounted component.
    // See https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html
    this.state._isMounted = false;
  },
  render: function() {
    return (
      <div className="CommentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm OnCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

