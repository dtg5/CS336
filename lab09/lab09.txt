
Exercise 9.1

a. What good has this bundling done? How big is the new bundle file? Check the Chrome DevTools network log to see what files are being loaded.

ANSWER: There are several things which the bundling has done that are probably advantageous. For one, as can be seen in Chrome's devTools on the "sources" tab, the localhost hierarchy has only one script source instead of many. This probably saves some overhead in processing the page. The AJAX libraries are mostly the same as they were before bundling, with the exception of babel-core. I'm not really sure why, but I am thinking that our configuration in .babelrc directed webpack to use babel to transpile to the indicated version. The bundle.js file itself is about 6kb, not exactly a saving on storage in our case, but that may be due to our files being so small in the first place.

b. What role did Babel play in the bundling?

ANSWER: As far as I know, Babel's purpose is to convert JavaScript from newer more sophisticated standards to the older syntax. This is done for the sake of compatibility, while also allowing coders to continue the newer syntax. Webpack seems to run it during bundling, which saves the page from having to call up the Babel library from AJAX later I suppose.

c. Can you just load file:///path…/index.html using the browser? Why or why not?

ANSWER: I am able to do this, but only because that file is stored locally on the computer I happen to be using. This would of course not be possible in the same way online. Interestingly, some of the functionality is lost when loading the page using the file path. I'm not able to see any comments or add to the file storing them.

d. In webpack.config.js, what does the loader test entry test: /\.jsx?$/ do?

ANSWER: JSX is a syntax extension to JavaScript. I understand it directs webpack to run files of that extension through a loader, "babel-loader" in this case. Presumably it is then transpiled as described in (b) from JSX and ES2015 to ES5, or something like that.

Exercise 9.2

a. Check out the new dist/index.html and dist/bundle.js. How are they different from the previous versions?

ANSWER: index.html is of course quite short, looking pretty much exactly like the template we created in the app directory. bundle.js however has grown considerably, clocking in at 1292 kb, as it now holds all of the modules needed for the page, including those from the libraries that were imported.

b. What good is it to replace the CDN library loads with module imports?

ANSWER: Reliability for one thing. As long as the server is up, there won't be any fault in the scripting arising from someone else's servers or changes to the imported libraries. Additionally it just cuts back on cross-scripting.

c. Check the network log. How many of the new modules you built are being loaded? How about the CSS file?

ANSWER: None to be seen. Only the index and bundle.js remain.

Exercise 9.3

a. Try out both ports and explain the difference between them.
    * localhost:3001 — Try editing one of the React module files. Explain what happens, both to the displayed SPA webpage and to the bundle/index files.

ANSWER: Any edits made to the module files seem to be reflected on this port almost instantly. The bundle and index files however have not been changed. At the moment, the only way to change those files seems to be to run the build again, though I am not sure if that is the desired behavior.

    * localhost:3000 — Try loading /api/comments. Explain what you get. Does the SPA page running on this port change (due to the edits made above) as well?

ANSWER: localhost:3000/api/comments brings up a page containing the contents of comments.json, and formatted rather nicely at that (using Firefox). Each entry is collapsable, and there are tab options for saving, copying, viewing the raw data, etc. As for edits to the modules, that does not seem to change the SPA on this port as it does for the dev server.

b. Is it worth all this trouble to build a development configuration?

ANSWER: I could certainly see its uses. Live updates on the SPA for tweaks made to the module scripts can theoretically save a lot of time. It can be tricky to set up though. I had to add a new dependency ("webpack-cli": "^1.5.3") and a new script ("start:dev": "node_modules/.bin/webpack-dev-server") to my package.json to get it to work.
